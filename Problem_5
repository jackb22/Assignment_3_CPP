#include <iostream>
#include <string>
#include <vector>


class Book{
private:
    std::string title;
    std::string author;
    std::string publisher;
    std::string isbn; // int cant store 13 digits so created string to store isbn.
    int year;
    int edition;


public:
    //Constructor
    Book(std::string title, std::string isbn, std::string author, int edition, std::string publisher, int year) {
        this->title = std::move(title);
        this->isbn = std::move(isbn);
        this->author = std::move(author);
        this->edition = edition;
        this->publisher = std::move(publisher);
        this->year = year;
    }

    // setters

    //set title
    void setTitle(const std::string& title) {
        this->title = title;
    }

    // set isbn
    void setISBN(const std::string& isbn) {
        // Validate that the ISBN is exactly 13 digits
        if (isbn.length() == 13 && isbn.find_first_not_of("0123456789") == std::string::npos) {
            this->isbn = isbn;
        } else {
            std::cout << "Invalid ISBN" << std::endl;
        }
    }

    // set author
    void setAuthor(const std::string& author) {
        this->author = author;
    }

    // set edition
    void setEdition(int edition) {
        this->edition = edition;
    }

    // set publisher
    void setPublisher(const std::string& publisher) {
        this->publisher = publisher;
    }

    // set year
    void setYear(int year) {
        this->year = year;
    }

    //Getters

    //get title
    const std::string& getTitle() const {
        return title;
    }

    // get author
    const std::string& getAuthor() const {
        return author;
    }

    // get isbn
    const std::string& getISBN() const {
        return isbn;
    }

    // get year
    int getYear() const {
        return year;
    }

    // get publisher
    const std::string& getPublisher() const {
        return publisher;
    }

    // get edition
    int getEdition() const {
        return edition;
    }

    void displayInfo() {
        std::cout << "Title: " << title << std::endl;
        std::cout << "ISBN: " << isbn << std::endl;
        std::cout << "Author: " << author << std::endl;
        std::cout << "Edition: " << edition << std::endl;
        std::cout << "Publisher: " << publisher << std::endl;
        std::cout << "Year of Publication: " << year << std::endl;
    }

};

class BookComparator {
public:

    bool operator()(const Book &book1, const Book &book2) const {
        if (book1.getTitle() != book2.getTitle()) {
            return book1.getTitle() < book2.getTitle();
        } else {
            return book1.getYear() < book2.getYear();
        }
    }
};


class Bookshelf{
public:
    
    static void displayBookList(const std::vector<Book>& books) {
        std::cout << "Books in the order they were entered:" << std::endl;
        for (Book book : books) {
            book.displayInfo();
            std::cout << std::endl;
        }
    }

    static void displaySortedBookList(std::vector<Book>& books) {
        std::sort(books.begin(), books.end(), BookComparator());
        std::cout << "Books sorted by title and year of publication:" << std::endl;
        for (Book book : books) {
            book.displayInfo();
            std::cout << std::endl;
        }
    }

    static void main() {
        std::vector<Book> Books;
        // Adding books to the vector
        Books.emplace_back("Harry Potter and the Philosopher's Stone", "978-1408855652", "J.K. Rowling", 1,"Bloomsbury Publishing", 1997);
        Books.emplace_back("Harry Potter and the Chamber of Secrets", "978-1408855669", "J.K. Rowling", 1,"Bloomsbury Publishing", 1998);
        Books.emplace_back("Harry Potter and the Prisoner of Azkaban", "978-1408855676", "J.K. Rowling", 1,"Bloomsbury Publishing", 1999);
        Books.emplace_back("Harry Potter and the Goblet of Fire", "978-1408855683", "J.K. Rowling", 1,"Bloomsbury Publishing", 2000);
        Books.emplace_back("Harry Potter and the Order of Phoenix", "978-1408855690", "J.K. Rowling", 1,"Bloomsbury Publishing", 2003);
        Books.emplace_back("Harry Potter and the Half-Blood Prince", "978-1408855706", "J.K. Rowling", 1,"Bloomsbury Publishing", 2005);
        Books.emplace_back("Harry Potter and the Deathly Hallows", "978-1408855713", "J.K. Rowling", 1,"Bloomsbury Publishing", 2007);
        Books.emplace_back("City of Bones", "978-1416955078", "Cassandra Clare", 1, "Margaret K. McElderry Books",2007);
        Books.emplace_back("City of Ashes", "978-1416972242", "Cassandra Clare", 1, "Margaret K. McElderry Books",2008);
        Books.emplace_back("City of Glass", "978-1416914303", "Cassandra Clare", 1, "Margaret K. McElderry Books",2009);
        Books.emplace_back("City of Fallen Angels", "978-1442403543", "Cassandra Clare", 1,"Margaret K. McElderry Books", 2011);
        Books.emplace_back("City of Lost Souls", "978-1442403550", "Cassandra Clare", 1, "Margaret K. McElderry Books",2012);

        
        displayBookList(Books);
        std::cout << std::endl;
        displaySortedBookList(Books);
    }

};

int main() {
    Bookshelf::main();
    return 0;
}

